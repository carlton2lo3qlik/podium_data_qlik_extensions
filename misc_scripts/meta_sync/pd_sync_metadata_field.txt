CREATE OR REPLACE FUNCTION podium_core.meta_sync_field()
  RETURNS trigger AS
$BODY$
DECLARE
field_var varchar(20);
    BEGIN



IF OLD.business_name IS DISTINCT FROM NEW.business_name THEN

        SELECT a.entity_type INTO field_var
        FROM podium_core.pd_entity a, podium_core.pd_field b 
        WHERE a.nid = b.entity_nid 
        AND b.nid = NEW.nid;

        IF field_var = 'EXTERNAL' THEN 

        --You have updated the external nid (parent). 
        --Now, go update internal (child) with the parent value
        --Where clause experience external NID

        UPDATE podium_core.pd_field
        SET business_name = b.BNAME_NEW
        FROM (select distinct a.nid, BNAME_NEW
                FROM podium_core.pd_field a 
                INNER JOIN (SELECT child_field_nid, a.business_name as BNAME_NEW
                        FROM podium_core.pd_field a
                        INNER JOIN podium_core.pd_field_pc_rel b on (a.nid = b.parent_field_nid)
                        WHERE a.nid=NEW.nid) b on (a.nid = b.child_field_nid)) AS b
        WHERE pd_field.nid=b.nid;

        ELSEIF field_var = 'INTERNAL'  THEN

        --You have updated the internal (child).
        --Now, go update external (parent) with the child value

        UPDATE podium_core.pd_field
        SET business_name = b.BNAME_NEW
        FROM (select distinct a.nid, BNAME_NEW
                FROM podium_core.pd_field a 
                INNER JOIN (SELECT parent_field_nid, a.business_name as BNAME_NEW
                        FROM podium_core.pd_field a
                        INNER JOIN podium_core.pd_field_pc_rel b on (a.nid = b.child_field_nid)
                        WHERE a.nid=NEW.nid) b on (a.nid = b.parent_field_nid)) AS b
        WHERE pd_field.nid=b.nid;

        END IF;
        DROP TABLE IF EXISTS field_var;
END IF;

IF OLD.business_desc IS DISTINCT FROM NEW.business_desc THEN

        SELECT a.entity_type INTO field_var
        FROM podium_core.pd_entity a, podium_core.pd_field b 
        WHERE a.nid = b.entity_nid 
        AND b.nid = NEW.nid;

        IF field_var = 'EXTERNAL' THEN 

        --You have updated the external nid (parent). 
        --Now, go update internal (child) with the parent value

        UPDATE podium_core.pd_field
        SET business_desc = b.BDESC_NEW
        FROM (select distinct a.nid, BDESC_NEW
                FROM podium_core.pd_field a 
                INNER JOIN (SELECT child_field_nid, a.business_desc as BDESC_NEW
                        FROM podium_core.pd_field a
                        INNER JOIN podium_core.pd_field_pc_rel b on (a.nid = b.parent_field_nid)
                        WHERE a.nid=NEW.nid) b on (a.nid = b.child_field_nid)) AS b
        WHERE pd_field.nid=b.nid;

        ELSEIF field_var = 'INTERNAL'  THEN

        --You have updated the internal (child).
        --Now, go update external (parent) with the child value

        UPDATE podium_core.pd_field
        SET business_desc = b.BDESC_NEW
        FROM (select distinct a.nid, BDESC_NEW
                FROM podium_core.pd_field a 
                INNER JOIN (SELECT parent_field_nid, a.business_desc as BDESC_NEW
                        FROM podium_core.pd_field a
                        INNER JOIN podium_core.pd_field_pc_rel b on (a.nid = b.child_field_nid)
                        WHERE a.nid=NEW.nid) b on (a.nid = b.parent_field_nid)) AS b
        WHERE pd_field.nid=b.nid;

        END IF;
        DROP TABLE IF EXISTS field_var;

END IF;

IF OLD.technical_desc IS DISTINCT FROM NEW.technical_desc THEN
        
        SELECT a.entity_type INTO field_var
        FROM podium_core.pd_entity a, podium_core.pd_field b 
        WHERE a.nid = b.entity_nid 
        AND b.nid = NEW.nid;

        IF field_var = 'EXTERNAL' THEN        

        UPDATE podium_core.pd_field
        SET technical_desc = b.TDESC_NEW
        FROM (select distinct a.nid, TDESC_NEW
                FROM podium_core.pd_field a 
                INNER JOIN (SELECT child_field_nid, a.technical_desc as TDESC_NEW
                        FROM podium_core.pd_field a
                        INNER JOIN podium_core.pd_field_pc_rel b on (a.nid = b.parent_field_nid)
                        WHERE a.nid=NEW.nid) b on (a.nid = b.child_field_nid)) AS b
        WHERE pd_field.nid=b.nid;

        ELSEIF field_var = 'INTERNAL'  THEN

        --You have updated the internal (child).
        --Now, go update external (parent) with the child value

        UPDATE podium_core.pd_field
        SET technical_desc = b.TDESC_NEW
        FROM (select distinct a.nid, TDESC_NEW
                FROM podium_core.pd_field a 
                INNER JOIN (SELECT parent_field_nid, a.technical_desc as TDESC_NEW
                        FROM podium_core.pd_field a
                        INNER JOIN podium_core.pd_field_pc_rel b on (a.nid = b.child_field_nid)
                        WHERE a.nid=NEW.nid) b on (a.nid = b.parent_field_nid)) AS b
        WHERE pd_field.nid=b.nid;

        END IF;
        DROP TABLE IF EXISTS field_var;
END IF;


RETURN NEW;       
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;

ALTER FUNCTION podium_core.meta_sync_field()
  OWNER TO postgres;


CREATE TRIGGER meta_sync_field
  AFTER UPDATE of business_name, business_desc, technical_desc
  ON podium_core.pd_field
  FOR EACH ROW
  EXECUTE PROCEDURE podium_core.meta_sync_field();

